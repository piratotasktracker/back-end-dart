openapi: 3.0.0
info:
  title: Pirato API
  description: API for task tracker application
  version: 1.0.0

tags:
  - name: User Management
    description: Endpoints for managing users
  - name: Authentication
    description: Endpoints for user authentication
  - name: Project Management
    description: Endpoints for managing project

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    ErrorMessage:
      type: object
      properties:
        statusCode:
          type: integer
        result:
          type: string
    LoginModel:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    DBProjectModel:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        teamMembers: 
          type: array
    DBTaskModel:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        linkedTasks: 
          type: list
        createdById:
          type: string
        assigneeId:
          type: string
        projectId:
          type: string
    SignUpModel:
      type: object
      properties:
        email:
          type: string
        avatar:
          type: string
          nullable: true
        full_name:
          type: string
        password:
          type: string
        role:
          type: integer
    UserResponse:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        avatar:
          type: string
          nullable: true
        full_name:
          type: string
        role:
          type: integer
    ProjectResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
          nullable: true
        createdAt:
          type: string
        updatedAt:
          type: string

paths:
  /:
    get:
      summary: Check if the server is alive
      responses:
        '200':
          description: Server is alive
          content:
            application/json:
              schema:
                type: string
  /users:
    get:
      summary: Get all users
      tags: 
        - User Management
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /users/{id}:
    get:
      summary: Get a user by ID
      tags: 
        - User Management
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A single user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /me:
    get:
      summary: Get me
      tags: 
        - User Management
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A single user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /signUp:
    post:
      summary: Sign up a new user
      tags: 
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpModel'
      responses:
        '200':
          description: User signed up successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /login:
    post:
      summary: Log in a user
      tags: 
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginModel'
      responses:
        '200':
          description: User logged in successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /projects:
    post:
      summary: Create project
      tags: 
        - Project Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DBProjectModel'
      responses:
        '200':
          description: Project created successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    get:
      summary: Get projects
      tags: 
        - Project Management
      responses:
        '200':
          description: Projects list
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /projects/{id}:
    get:
      summary: Get a project by ID
      tags: 
        - Project Management
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A single project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    put:
      summary: Update project
      tags: 
        - Project Management
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DBProjectModel'
      responses:
        '200':
          description: Project updated successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    delete:
      summary: Delete project
      tags: 
        - Project Management
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Project deleted successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /tasks/{id}:
    get:
      summary: Get a task by ID
      tags: 
        - Task Management
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A single task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    put:
      summary: Update task
      tags: 
        - Task Management
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DBTaskModel'
      responses:
        '200':
          description: Task updated successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    delete:
      summary: Delete task
      tags: 
        - Task Management
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Task deleted successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /projects/{id}/tasks/:
    get:
      summary: Get a tasks by project id
      tags: 
        - Project Management
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of tasks
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /tasks:
    post:
      summary: Create task
      tags: 
        - Task Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DBTaskModel'
      responses:
        '200':
          description: Task created successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    get:
      summary: Get tasks
      tags: 
        - Task Management
      responses:
        '200':
          description: Tasks list
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'

security:
  - bearerAuth: []
